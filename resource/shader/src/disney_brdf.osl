shader kp_dinsey_brdf
[[
    string node_name = "disney",
    string category = "shader",
    string help = "disney brdf shader"
]]
(
    color base_color = color(0.5)
    [[
        string label = "Base Color",
        int connectable = 1
    ]],
    float sub_surface = 0.2
    [[
        string label = "Subsurface",
        int connectable = 1
    ]],
    float metallic = 0.2
    [[
        string label = "Metallic",
        int connectable = 1
    ]],
    float specular = 0.7
    [[
        string label = "Specular",
        int connectable = 1
    ]],
    float specular_tint = 0.1
    [[
        string label = "Specular tint",
        int connectable = 1
    ]],
    float roughness = 0.5
    [[
        string label = "Roughness",
        int connectable = 1
    ]],
    float anisotropic = 0
    [[
        string label = "Anisotropic",
        int connectable = 1
    ]],
    float sheen = 0.1
    [[
        string label = "Sheen",
        int connectable = 1
    ]],
    float sheen_tint = 0.1
    [[
        string label = "Sheen tint",
        int connectable = 1
    ]],
    float clearcoat = 0.1
    [[
        string label = "Clearcoat",
        int connectable = 1
    ]],
    float clearcoat_gloss = 0.1
    [[
        string label = "Clearcoat gloss",
        int connectable = 1
    ]],
    float eta = 1.43
    [[
        string label = "IOR",
        int connectable = 0
    ]],
    float bump_offset = 0
    [[
        string label = "Bump mapping",
        int connectable = 1
    ]]
)
{
    // Calculate bumped normal
    //N = normalize(calculatenormal(P + (vector)N * bump_offset));
    N = normalize(calculatenormal(P + (vector)N * noise(P)));

    // Utility variables
    float diffuse_weight = 1 - clamp(metallic, 0, 1);
    float metallic_weight = 1 - diffuse_weight;
    float base_lum = luminance(base_color);
    color tint_color = base_lum > 0 ? base_color / base_lum : color(1, 1, 1);

    Ci = 0;

    if (diffuse_weight > 0) {
        // Diffuse component
        Ci = mix(base_color * (kp_principle_diffuse(N) + kp_principle_retro(N, roughness)),
            base_color * kp_principle_fakess(roughness), sub_surface);

        // Sheen component
        if (sheen > 1e-6) {
            color sheen_color = mix(color(1), tint_color, sheen_tint);
            Ci = Ci + sheen_color * sheen * kp_principle_sheen(N);
        }

        Ci = Ci * diffuse_weight;
    }

    if (metallic_weight > 0) {
        float aspect = sqrt(1 - anisotropic * .9);
        float ax = max(.001, roughness * roughness / aspect);
        float ay = max(.001, roughness * roughness * aspect);
        float r0 = (eta - 1) * (eta - 1) / ((eta + 1) * (eta + 1));
        // Paper page 15
        // "The normalized range of this parameter is remapped linearly to the
        // incident specular range [0.0, 0.08]."
        color spec_color = mix(0.08 * specular * mix(color(1), tint_color, specular_tint),
            base_color, metallic_weight);
        Ci = Ci + kp_principle_specular_reflection(spec_color, N, ax, ay, eta, metallic_weight);
    }

    if (clearcoat > 0) {
        // The implementation is from pbrt-v3, original paper didn't explain
        // much on the clearcoat gloss parameter
        // Same pattern is found in WDAS/brdf_explorer
        Ci = Ci + clearcoat * kp_principle_clearcoat(N, mix(.1, .001, clearcoat_gloss));
    }
}